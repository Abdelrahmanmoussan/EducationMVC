// <auto-generated />
using System;
using IdentityText.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IdentityText.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250618155552_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AcademicYearTeacher", b =>
                {
                    b.Property<int>("AcademicYearsAcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("TeachersTeacherId")
                        .HasColumnType("int");

                    b.HasKey("AcademicYearsAcademicYearId", "TeachersTeacherId");

                    b.HasIndex("TeachersTeacherId");

                    b.ToTable("AcademicYearTeacher");
                });

            modelBuilder.Entity("IdentityText.Models.AcademicYear", b =>
                {
                    b.Property<int>("AcademicYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicYearId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AcademicYearId");

                    b.ToTable("AcademicYears");

                    b.HasData(
                        new
                        {
                            AcademicYearId = 1,
                            Name = "First year of middle school "
                        },
                        new
                        {
                            AcademicYearId = 2,
                            Name = "Second year of middle school"
                        },
                        new
                        {
                            AcademicYearId = 3,
                            Name = "Third year of middle school"
                        });
                });

            modelBuilder.Entity("IdentityText.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7aafd540-fdf8-482b-804d-780fb6726703",
                            AccessFailedCount = 0,
                            Address = "Quesna,Menofia",
                            ConcurrencyStamp = "9972db73-79a5-44fd-83ea-abc55743315e",
                            Email = "amin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Amin",
                            LastName = "Mohamed",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMIN@GMAIL.COM",
                            NormalizedUserName = "AMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEASZmmVpzsm6kV6Lacj5Y/c4amQkSNdNhGS8Ghj8NJE65YaMBR4RS5BXPp+6nySTBw==",
                            PhoneNumberConfirmed = false,
                            Photo = "admin.jpg",
                            SecurityStamp = "0c322de8-a9ba-48c8-8aa5-747da0dd5030",
                            TwoFactorEnabled = false,
                            UserName = "amin"
                        },
                        new
                        {
                            Id = "9b4cd611-6c35-4c98-a0dc-1d2e1349ab91",
                            AccessFailedCount = 0,
                            Address = "Port Said",
                            ConcurrencyStamp = "2aa86871-c5f3-43ca-9ef7-cf68daff3afa",
                            Email = "abdelrahmanmoussan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Abdelrahman",
                            LastName = "Moussan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ABDELRAHMANMOUSSAN@GMAIL.COM",
                            NormalizedUserName = "ABDELRAHMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMPFGse4KolttLYFRXgjpdIvOa1/esb3BAVV/0O5ejMDvJR6cFiLB5+XM+LkRewDHA==",
                            PhoneNumberConfirmed = false,
                            Photo = "Moussan.jpg",
                            SecurityStamp = "3bd5ddd5-da4c-44fb-a5c6-e658ae07fcf7",
                            TwoFactorEnabled = false,
                            UserName = "abdelrahman"
                        },
                        new
                        {
                            Id = "7zzfd540-fdf8-482b-804d-780fb6726703",
                            AccessFailedCount = 0,
                            Address = "Quesna,Menofia",
                            ConcurrencyStamp = "1d6a2079-5524-4023-bee8-ef2acf2c33d4",
                            Email = "ahmed@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmed",
                            LastName = "Samir",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@GMAIL.COM",
                            NormalizedUserName = "AHMED",
                            PasswordHash = "AQAAAAIAAYagAAAAEH5PE0ymU6JhkMJqcJfITMBL1WJTS9kPbU6vq5b9a+vakYN7EtZa8gAjRmjOb0uI4g==",
                            PhoneNumberConfirmed = false,
                            Photo = "Customer.jpg",
                            SecurityStamp = "12b5d5e2-c949-4b6a-9005-6bd7b9ed818e",
                            TwoFactorEnabled = false,
                            UserName = "ahmed"
                        },
                        new
                        {
                            Id = "7nnfd540-fdf8-482b-804d-780fb6726703",
                            AccessFailedCount = 0,
                            Address = "Quesna,Menofia",
                            ConcurrencyStamp = "24ae7629-e45d-4402-8520-e92f87bf0993",
                            Email = "omar@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Omar",
                            LastName = "Fathi",
                            LockoutEnabled = false,
                            NormalizedEmail = "Omar@GMAIL.COM",
                            NormalizedUserName = "Omar",
                            PasswordHash = "AQAAAAIAAYagAAAAEGGUUBukbj8ue8yB3EUiYw+Jh3iU7ozy5vAZA3rHMrb2vwD2F1+nKMjwYJFJdgAFQQ==",
                            PhoneNumberConfirmed = false,
                            Photo = "Teacher.jpg",
                            SecurityStamp = "b7bc1e69-eec9-496b-8ae9-7e8e2795a76d",
                            TwoFactorEnabled = false,
                            UserName = "omar"
                        });
                });

            modelBuilder.Entity("IdentityText.Models.Assessment", b =>
                {
                    b.Property<int>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentId"));

                    b.Property<string>("AssessmentLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClassGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<int>("MaxScore")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssessmentId");

                    b.HasIndex("ClassGroupId");

                    b.HasIndex("LectureId")
                        .IsUnique();

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("IdentityText.Models.AssessmentResult", b =>
                {
                    b.Property<int>("AssessmentResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentResultId"));

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentSolutionPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssessmentResultId");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("AssessmentResults");
                });

            modelBuilder.Entity("IdentityText.Models.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"));

                    b.Property<int>("AttendanceStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<int?>("EnrollmentId1")
                        .HasColumnType("int");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("AttendanceId");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("EnrollmentId1");

                    b.HasIndex("LectureId");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("IdentityText.Models.ClassGroup", b =>
                {
                    b.Property<int>("ClassGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassGroupId"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("CGStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassGroupId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassGroups");
                });

            modelBuilder.Entity("IdentityText.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"));

                    b.Property<int>("ClassGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnrollmentStatus")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("ClassGroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("IdentityText.Models.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassGroupId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassGroupId");

                    b.ToTable("favorites");
                });

            modelBuilder.Entity("IdentityText.Models.Lecture", b =>
                {
                    b.Property<int>("LectureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LectureId"));

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<int>("ClassGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LectureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LectureId");

                    b.HasIndex("ClassGroupId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("IdentityText.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("IdentityText.Models.NotificationRecipient", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationRecipientId")
                        .HasColumnType("int");

                    b.Property<bool?>("DeliveryByGmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationId", "NotificationRecipientId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationRecipients");
                });

            modelBuilder.Entity("IdentityText.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("NetAmountForTeacher")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("PlatformPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("IdentityText.Models.PrivateLesson", b =>
                {
                    b.Property<int>("PrivateLessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrivateLessonId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrivateLessonId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("PrivateLessons");
                });

            modelBuilder.Entity("IdentityText.Models.PrivateLessonStudent", b =>
                {
                    b.Property<int>("PrivateLessonId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("PrivateLessonId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("PrivateLessonStudents");
                });

            modelBuilder.Entity("IdentityText.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<decimal>("AttendancePercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParentMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ParentPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StudentDB")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            AcademicYearId = 2,
                            AttendancePercent = 100m,
                            EmergencyContact = "01098765432",
                            EnrollmentDate = new DateTime(2025, 6, 18, 18, 55, 46, 633, DateTimeKind.Local).AddTicks(634),
                            ParentMail = "samir@gmail.com",
                            ParentName = "Mr. Samir",
                            ParentPhone = "01012345678",
                            StudentDB = new DateTime(2008, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "7zzfd540-fdf8-482b-804d-780fb6726703"
                        });
                });

            modelBuilder.Entity("IdentityText.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            Description = "Basic mathematics subject",
                            SubjectType = 0,
                            Title = "mathematics"
                        },
                        new
                        {
                            SubjectId = 2,
                            Description = "Basic science subject",
                            SubjectType = 0,
                            Title = "sciences"
                        },
                        new
                        {
                            SubjectId = 3,
                            Description = "Basic Arabic language subject",
                            SubjectType = 0,
                            Title = "Arabic"
                        },
                        new
                        {
                            SubjectId = 4,
                            Description = "Basic English subject",
                            SubjectType = 1,
                            Title = "english"
                        },
                        new
                        {
                            SubjectId = 5,
                            Description = "Basic social studies subject",
                            SubjectType = 1,
                            Title = "Social studies"
                        });
                });

            modelBuilder.Entity("IdentityText.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionStatus")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("EnrollmentId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("IdentityText.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(2,1)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TeacherDB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TeacherHireDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TeacherNetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TeacherNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TeacherId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            Rating = 4.5m,
                            SubjectId = 1,
                            TeacherDB = new DateTime(1995, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherHireDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherNetAmount = 3000m,
                            TeacherNotes = "Expert in physics",
                            UserId = "7nnfd540-fdf8-482b-804d-780fb6726703"
                        });
                });

            modelBuilder.Entity("IdentityText.Models.TeacherAcademicYear", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "AcademicYearId");

                    b.HasIndex("AcademicYearId");

                    b.ToTable("TeacherAcademicYears");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5aa54943-8b55-4399-91b7-d247ab235cf3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8bbc91c3-0b30-4451-b78e-a26edf6e1c61",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "7vvfd540-fdf8-482b-804d-780fb6726703",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "8ddc91c3-0b30-4451-b78e-a26edf6e1c61",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7aafd540-fdf8-482b-804d-780fb6726703",
                            RoleId = "5aa54943-8b55-4399-91b7-d247ab235cf3"
                        },
                        new
                        {
                            UserId = "9b4cd611-6c35-4c98-a0dc-1d2e1349ab91",
                            RoleId = "5aa54943-8b55-4399-91b7-d247ab235cf3"
                        },
                        new
                        {
                            UserId = "7zzfd540-fdf8-482b-804d-780fb6726703",
                            RoleId = "7vvfd540-fdf8-482b-804d-780fb6726703"
                        },
                        new
                        {
                            UserId = "7nnfd540-fdf8-482b-804d-780fb6726703",
                            RoleId = "8ddc91c3-0b30-4451-b78e-a26edf6e1c61"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AcademicYearTeacher", b =>
                {
                    b.HasOne("IdentityText.Models.AcademicYear", null)
                        .WithMany()
                        .HasForeignKey("AcademicYearsAcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityText.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityText.Models.Assessment", b =>
                {
                    b.HasOne("IdentityText.Models.ClassGroup", null)
                        .WithMany("Assessments")
                        .HasForeignKey("ClassGroupId");

                    b.HasOne("IdentityText.Models.Lecture", "Lecture")
                        .WithOne("Assessment")
                        .HasForeignKey("IdentityText.Models.Assessment", "LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("IdentityText.Models.AssessmentResult", b =>
                {
                    b.HasOne("IdentityText.Models.Assessment", "Assessment")
                        .WithMany("AssessmentResults")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityText.Models.Student", "Student")
                        .WithMany("AssessmentResults")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IdentityText.Models.Attendance", b =>
                {
                    b.HasOne("IdentityText.Models.Enrollment", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IdentityText.Models.Enrollment", null)
                        .WithMany("Attendances")
                        .HasForeignKey("EnrollmentId1");

                    b.HasOne("IdentityText.Models.Lecture", "Lecture")
                        .WithMany("Attendances")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityText.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Enrollment");

                    b.Navigation("Lecture");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IdentityText.Models.ClassGroup", b =>
                {
                    b.HasOne("IdentityText.Models.AcademicYear", "AcademicYear")
                        .WithMany("ClassGroups")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IdentityText.Models.Subject", "Subject")
                        .WithMany("ClassGroups")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityText.Models.Teacher", "Teacher")
                        .WithMany("ClassGroups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("IdentityText.Models.Enrollment", b =>
                {
                    b.HasOne("IdentityText.Models.ClassGroup", "ClassGroup")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClassGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityText.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassGroup");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IdentityText.Models.Favorite", b =>
                {
                    b.HasOne("IdentityText.Models.ClassGroup", "ClassGroup")
                        .WithMany()
                        .HasForeignKey("ClassGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassGroup");
                });

            modelBuilder.Entity("IdentityText.Models.Lecture", b =>
                {
                    b.HasOne("IdentityText.Models.ClassGroup", "ClassGroup")
                        .WithMany("Lectures")
                        .HasForeignKey("ClassGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassGroup");
                });

            modelBuilder.Entity("IdentityText.Models.Notification", b =>
                {
                    b.HasOne("IdentityText.Models.ApplicationUser", null)
                        .WithMany("Notifications")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("IdentityText.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityText.Models.NotificationRecipient", b =>
                {
                    b.HasOne("IdentityText.Models.Notification", "Notification")
                        .WithMany("NotificationRecipients")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IdentityText.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityText.Models.Payment", b =>
                {
                    b.HasOne("IdentityText.Models.Enrollment", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityText.Models.Student", null)
                        .WithMany("payments")
                        .HasForeignKey("StudentId");

                    b.HasOne("IdentityText.Models.Teacher", null)
                        .WithMany("Payments")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("IdentityText.Models.PrivateLesson", b =>
                {
                    b.HasOne("IdentityText.Models.Subject", "Subject")
                        .WithMany("PrivateLessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityText.Models.Teacher", "Teacher")
                        .WithMany("PrivateLessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("IdentityText.Models.PrivateLessonStudent", b =>
                {
                    b.HasOne("IdentityText.Models.PrivateLesson", "PrivateLesson")
                        .WithMany("PrivateLessonStudents")
                        .HasForeignKey("PrivateLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityText.Models.Student", "Student")
                        .WithMany("PrivateLessonStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivateLesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IdentityText.Models.Student", b =>
                {
                    b.HasOne("IdentityText.Models.AcademicYear", "AcademicYear")
                        .WithMany("Students")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityText.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("IdentityText.Models.Subscription", b =>
                {
                    b.HasOne("IdentityText.Models.Enrollment", "Enrollment")
                        .WithMany("Subscriptions")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("IdentityText.Models.Teacher", b =>
                {
                    b.HasOne("IdentityText.Models.Subject", "Subject")
                        .WithMany("Teachers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityText.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("IdentityText.Models.TeacherAcademicYear", b =>
                {
                    b.HasOne("IdentityText.Models.AcademicYear", "AcademicYear")
                        .WithMany("TeacherAcademicYears")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityText.Models.Teacher", "Teacher")
                        .WithMany("TeacherAcademicYears")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IdentityText.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IdentityText.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityText.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IdentityText.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityText.Models.AcademicYear", b =>
                {
                    b.Navigation("ClassGroups");

                    b.Navigation("Students");

                    b.Navigation("TeacherAcademicYears");
                });

            modelBuilder.Entity("IdentityText.Models.ApplicationUser", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("IdentityText.Models.Assessment", b =>
                {
                    b.Navigation("AssessmentResults");
                });

            modelBuilder.Entity("IdentityText.Models.ClassGroup", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Enrollments");

                    b.Navigation("Lectures");
                });

            modelBuilder.Entity("IdentityText.Models.Enrollment", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("IdentityText.Models.Lecture", b =>
                {
                    b.Navigation("Assessment");

                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("IdentityText.Models.Notification", b =>
                {
                    b.Navigation("NotificationRecipients");
                });

            modelBuilder.Entity("IdentityText.Models.PrivateLesson", b =>
                {
                    b.Navigation("PrivateLessonStudents");
                });

            modelBuilder.Entity("IdentityText.Models.Student", b =>
                {
                    b.Navigation("AssessmentResults");

                    b.Navigation("Enrollments");

                    b.Navigation("PrivateLessonStudents");

                    b.Navigation("payments");
                });

            modelBuilder.Entity("IdentityText.Models.Subject", b =>
                {
                    b.Navigation("ClassGroups");

                    b.Navigation("PrivateLessons");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("IdentityText.Models.Teacher", b =>
                {
                    b.Navigation("ClassGroups");

                    b.Navigation("Payments");

                    b.Navigation("PrivateLessons");

                    b.Navigation("TeacherAcademicYears");
                });
#pragma warning restore 612, 618
        }
    }
}
